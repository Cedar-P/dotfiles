#+TITLE: My Emacs Config, No Longer Bankrupt
#+AUTHOR: bugger
#+PROPERTY: header-args :tangle init.el
#+OPTIONS: toc:2
#+AUTO_TANGLE: t
#+STARTUP: overview

* Table of contents :toc:
- [[#make-emacsd-clean-again][Make .emacs.d clean again!]]
- [[#package-setup][Package Setup]]
  - [[#melpa][Melpa]]
  - [[#use-package][Use Package]]
- [[#ux][UX]]
  - [[#fonts][Fonts]]
  - [[#indent-guides][Indent guides]]
  - [[#ligatures][Ligatures]]
  - [[#theme][Theme]]
  - [[#highlight-line][Highlight line]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#line-numbers][Line numbers]]
  - [[#rid-of-ugly-stuff][Rid of ugly stuff]]
  - [[#scrolling][Scrolling]]
  - [[#rainbows][Rainbows!]]
  - [[#tree-sitter][Tree Sitter]]
  - [[#beacon][Beacon]]
  - [[#visual-line-mode][Visual Line Mode]]
  - [[#window-transparency][Window Transparency]]
- [[#org-mode][Org mode]]
  - [[#org-tempo][Org tempo]]
  - [[#indentation][Indentation]]
  - [[#toc-org][Toc-org]]
  - [[#babel-settings][Babel settings]]
  - [[#org-agenda][Org agenda]]
  - [[#org-bullets][Org Bullets]]
  - [[#heading-sizes][Heading Sizes]]
  - [[#org-ref][Org-ref]]
  - [[#org-present][Org-present]]
- [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#prescient][Prescient]]
  - [[#consult][Consult]]
- [[#programming-help][Programming Help]]
  - [[#languages][Languages]]
  - [[#eglot][Eglot]]
  - [[#magit][Magit]]
  - [[#aggressive-indentation][Aggressive Indentation]]
  - [[#commenting][Commenting]]
  - [[#corfu][Corfu]]
- [[#nice-packages-and-settings][Nice Packages and Settings]]
  - [[#dashboard][Dashboard]]
  - [[#keeping-emacs-clean][Keeping emacs clean]]
  - [[#electric-pairing][Electric Pairing]]
  - [[#tabbing][Tabbing]]
  - [[#too-lazy-to-type-yes][Too lazy to type yes]]
  - [[#perspectives][Perspectives]]
  - [[#dired][Dired]]
  - [[#auto-backup][Auto Backup]]
  - [[#goodbye-message][Goodbye message]]
  - [[#move-lines][Move Lines]]
  - [[#sudo-edit][Sudo Edit]]
  - [[#yasnippet][YASnippet]]
- [[#emacs-as-an-operating-system][Emacs as an Operating System]]
  - [[#calfw][Calfw]]
  - [[#mu4e][MU4E]]
  - [[#password-encryption][Password Encryption]]
- [[#keybindings][Keybindings]]
  - [[#delete-a-tab-not-4-spaces][Delete a tab, not 4 spaces]]
  - [[#reload-emacs][Reload Emacs]]
  - [[#which-key][Which-key]]
  - [[#kill-all-buffers][kill-all-buffers]]
  - [[#scroll][Scroll]]
- [[#clean-up][Clean up]]

* Make .emacs.d clean again!
I like to keep just the things I want in my user-emacs-directory, so I tell emacs to put everything except the stuff I want in a different spot
#+begin_src emacs-lisp
  (if (not (boundp 'has-restarted))
      (setq has-restarted nil)
    (setq has-restarted t))

  (when (not has-restarted)
    (setq config-dir user-emacs-directory)) ;; to use for some stuff like autostart.sh for example, which I do want in my default user-emacs-directory
  (setq user-emacs-directory "~/.local/share/emacs/")
#+end_src

* Package Setup
** Melpa
Melpa is a repository for emacs that enables a lot more than what is in the standard elpa repos
#+begin_src emacs-lisp
  (require 'package)
  (setq package-user-dir (concat user-emacs-directory ".local/elpa"))
  (setq package-gnupghome-dir (concat user-emacs-directory ".local/elpa/gnupg"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src
** Use Package
As of Emacs 29, use-package is built in, so you don't need to install it, but I like to set some settings for it
#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src
* UX
** Fonts
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "JetBrains Mono Nerd Font-14"))
#+end_src

** Indent guides
Lines to mark indentation levels
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :config
    (setq highlight-indent-guides-method 'character)
    (set-face-foreground 'highlight-indent-guides-character-face "gray31")
    :hook (prog-mode . (lambda () (interactive) (highlight-indent-guides-mode 1))))
#+end_src
** Ligatures
Turn things like -> into fancy arrows
#+begin_src emacs-lisp
  (use-package ligature
    :ensure t
    :config
    (ligature-set-ligatures 'prog-mode '("--" "---" "==" "===" "!=" "!==" "=!="
                                "=:=" "=/=" "<=" ">=" "&&" "&&&" "&=" "++" "+++" "***" ";;" "!!"
                                "??" "???" "?:" "?." "?=" "<:" ":<" ":>" ">:" "<:<" "<>" "<<<" ">>>"
                                "<<" ">>" "||" "-|" "_|_" "|-" "||-" "|=" "||=" "##" "###" "####"
                                "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#=" "^=" "<$>" "<$"
                                "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</" "</>" "/>" "<!--" "<#--"
                                "-->" "->" "->>" "<<-" "<-" "<=<" "=<<" "<<=" "<==" "<=>" "<==>"
                                "==>" "=>" "=>>" ">=>" ">>=" ">>-" ">-" "-<" "-<<" ">->" "<-<" "<-|"
                                "<=|" "|=>" "|->" "<->" "<~~" "<~" "<~>" "~~" "~~>" "~>" "~-" "-~"
                                "~@" "[||]" "|]" "[|" "|}" "{|" "[<" ">]" "|>" "<|" "||>" "<||"
                                "|||>" "<|||" "<|>" "..." ".." ".=" "..<" ".?" "::" ":::" ":=" "::="
                                ":?" ":?>" "//" "///" "/*" "*/" "/=" "//=" "/==" "@_" "__" "???"
                                "<:<" ";;;"))
    (global-ligature-mode t))
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package timu-macos-theme
    :ensure t
    :init
    (load-theme 'catppuccin t))
#+end_src

** Highlight line
#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src
** Doom Modeline
Fancy little modeline that looks a bit better than the stock one
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :ensure octicons
    :init
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35
          doom-modeline-project-detection 'file-name
          doom-modeline-buffer-encoding nil
          doom-modeline-persp-name t
          doom-modeline-persp-icon t
          doom-modeline-mu4e t))

#+end_src
** Line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (menu-bar--display-line-numbers-mode-relative)
#+end_src

** Rid of ugly stuff
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

** Scrolling
#+begin_src emacs-lisp
  ;; scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; 1 line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq scroll-conservatively 101) ;; scroll one line at a time when moving the cursor down the page
  (pixel-scroll-precision-mode t)
#+end_src

** Rainbows!
Adds rainbow parentheses and color to hex values and such
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook (prog-mode . rainbow-mode))
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Tree Sitter
Tree sitter is a parsing library that gives us good, fast syntax highlighting
Tree sitter is now built into emacs as of Emacs 29
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
	'((bash "https://github.com/tree-sitter/tree-sitter-bash")
	  (cmake "https://github.com/tree-sitter/tree-sitter-cmake")
	  (c "https://github.com/tree-sitter/tree-sitter-c")
	  (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
	  (rust "https://github.com/tree-sitter/tree-sitter-rust")
	  (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
	  (java "https://github.com/tree-sitter/tree-sitter-java")
	  (markdown "https://github.com/tree-sitter/tree-sitter-md")
	  (make "https://github.com/tree-sitter/tree-sitter-make")))

  (add-hook 'java-mode-hook 'java-ts-mode)
  (add-hook 'c-mode-hook 'c-ts-mode)
  (add-hook 'c++-mode-hook 'c++-ts-mode)
  (with-eval-after-load 'rust-mode
    (add-hook 'rust-mode 'rust-ts-mode))
#+end_src
** Beacon
Never lose your cursor again with this beacon of light
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+end_src
** Visual Line Mode
I want lines to wrap around onto another line rather than spilling off the screen, and I want to be able to press =C-n= to go to the line that's spilling over
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src
** Window Transparency
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background .  100))
#+end_src
* Org mode
Org mode is an extremely helpful tool that allows you to do anything from writing scientific papers, take notes, even write entire programs!
** Org tempo
A simple tool that simplifies writing source code blocks to just typing <s TAB, as well as other similar functions
#+begin_src emacs-lisp
  (use-package org-tempo
    :ensure nil)
#+end_src

** Indentation
Get some nice indentation so that 1st level headings are shown left-most, and text gets progressively indented to the right as the level of the heading gets lower
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-hide-leading-stars nil)
#+end_src

** Toc-org
This automatically generates a table of contents under any heading tagged :TOC:
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :hook (org-mode . (lambda () (interactive) (toc-org-mode 1))))
#+end_src
** Babel settings
Babel is the tool that lets you compile org documents (like this one!) into actual files.

Here, I set up auto tangle, which will do that compilation automatically upon save
#+begin_src emacs-lisp
    (use-package org-auto-tangle
      :ensure t
      :hook (org-mode . (lambda () (interactive) (org-auto-tangle-mode 1))))

    (setq org-src-fontify-natively t ;; use the font like it is in a normal buffer
          org-src-tab-acts-natively t ;; tab works like it does in a normal buffer
          org-confirm-babel-evaluate nil ;; don't ask to evaluate code
          org-src-window-setup 'current-window) ;; have the org-edit-special command consume the current window
#+end_src

** Org agenda
Org agenda is a full blown scheduling application with all the power of org mode built into it
#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/org/agenda/schedule.org"))
#+end_src

** Org Bullets
Use fancy bullets instead of simple *'s
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Heading Sizes
Make the headings larger than ordinary text
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook #'(lambda ()
                               (interactive)
                               (set-face-attribute 'org-level-1 nil :height 1.3)
                               (set-face-attribute 'org-level-2 nil :height 1.2)
                               (set-face-attribute 'org-level-3 nil :height 1.1)))
#+end_src
** Org-ref
A simple and efficient tool to manage your references when writing papers with org mode
#+begin_src emacs-lisp
  (use-package org-ref :ensure t)
#+end_src

*** Fixing APA Style Papers
#+begin_src emacs-lisp
  (add-to-list 'org-latex-classes
               '("apa7"
                 "\\documentclass{apa7}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (add-to-list 'org-latex-classes
               '("apa6"
                 "\\documentclass{apa6}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

#+end_src
** Org-present
In case I don't feel like going through the rigamarole of a beamer presentation, I can just present info through org mode
#+begin_src emacs-lisp
  (use-package org-present
    :ensure t)
#+end_src
*** Centering text
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :ensure t
    :defer t
    :hook (org-present-mode . visual-fill-column-mode)
    :custom
    visual-fill-column-center-text t
    visual-fill-column-width 110)
#+end_src
* Vertico
A simple and efficient minibuffer completion framework for emacs
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode 1))
#+end_src

** Marginalia
This adds extra little details to what is shown in the minibuffer.
For example, it will show the description for a function next to function name when calling functions interactively through =M-x=
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode 1)
    :after vertico)
#+end_src

** Prescient
Unlock the powers of psychic history with prescient! It will remember what commands you have issued, and order interactive lists in a way such that the commands used most frequently pop up at the top.

Cool thing about this is that it's not just for vertico, or even just minibuffer completion frameworks in general! It has packages for company, corfu, ivy, and more!
#+begin_src emacs-lisp
  (use-package prescient
    :ensure t
    :ensure vertico-prescient
    :after vertico
    :config
    (vertico-prescient-mode 1)
    (prescient-persist-mode 1)
    :after vertico)
#+end_src

** Consult
Even more interactive minibuffer? Yes please!

This will let you preview options as you hover over them in vertico.
For example, with =M-x consult-themes RET= you can get a preview of themes as you hover over them
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :after vertico)
#+end_src
* Programming Help
Things like eglot and projectile are a huge help when programming
** Languages
#+begin_src emacs-lisp
  (use-package rust-mode :ensure t)
  (use-package haskell-mode :ensure t)
#+end_src
** Eglot
A lightweight LSP implementation built into emacs (as of emacs 29)

This will go though your project and let you do some pretty neat things, like rename variables across the project, follow definitions of functions/variables, find references to a function/variable, and much more
#+begin_src emacs-lisp
  (when (< emacs-major-version 29)
    (use-package eglot
      :ensure t))
  (with-eval-after-load 'eglot
    (setq eglot-autoshutdown t))
  ;; (add-hook 'c-ts-mode-hook #'eglot-ensure)
  ;; (add-hook 'c++-ts-mode-hook #'eglot-ensure)
  ;; (add-hook 'rust-ts-mode #'eglot-ensure)
  ;; (add-hook 'haskell-mode #'eglot-ensure)
  ;;  (use-package eglot-java
  ;;    :hook (java-ts-mode . eglot-ensure))
#+end_src
** Magit
A git porcelain for emacs to let you use the power of emacs within git
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :ensure t)
#+end_src
** Aggressive Indentation
I like to keep all my lisp code indented properly automatically, and aggressive indentation is really nice for that

This is actually really annoying in languages that use tabbing to denote scope/seperation, like C or Java, so just for lisp
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
** Commenting
Neat package that gives some nice commenting functions
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :bind ("C-c C-/" . evilnc-comment-or-uncomment-lines))
#+end_src
** Corfu
A simple integration of some neat autocomplete functionality for emacs. Like vertico but in a more general case, when typing in an ordinary buffer.

To invoke autocomplete, type =C-M-i= while typing a buffer (works best in an eglot-controlled buffer)
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :ensure nerd-icons-corfu
    :ensure nerd-icons
    :init
    (setq corfu-auto t)
    :hook (prog-mode . corfu-mode))
#+end_src
* Nice Packages and Settings
Things that aren't really necessary to do stuff, but nice to have
** Dashboard
*** Dependencies
Show the recent files
#+begin_src emacs-lisp
  (use-package recentf
    :ensure t
    :config
    ;; remove boilerplate files from recentf list
    (add-to-list 'recentf-exclude "~/org/agenda/schedule.org")
    (add-to-list 'recentf-exclude (concat user-emacs-directory "bookmarks")))
#+end_src

*** The actual dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure page-break-lines
    :ensure all-the-icons
    :after recentf
    :hook (dashboard-mode . (lambda () (interactive) (page-break-lines-mode 1)))
    :hook (dashboard-mode . (lambda () (interactive) (display-line-numbers-mode -1)))
    :ensure t
    :init
    (setq dashboard-page-separator "
  
  " ;; tell dashboard to use nice looking lines for section seperation

          initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")) ;; tell emacs to use dashboard as startup screen
          dashboard-items '((recents . 5)
                            (projects . 5)
                            (agenda . 5))
          dashboard-center-content t
          dashboard-startup-banner (concat config-dir "dash.txt")
          dashboard-icon-type 'all-the-icons
          dashboard-set-navigator t
          dashboard-set-file-icons t
          dashboard-set-heading-icons t
          dashboard-display-icons-p t)
    (advice-add #'dashboard-replace-displayable :override #'identity)
    :config
    (dashboard-setup-startup-hook))
#+end_src
** Keeping emacs clean
Some things ,*cough cough auto-save-list,* don't like to cooperate with the settings I put earlier, so I use the no-littering package to fix that
#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t)
#+end_src
** Electric Pairing
Automatically pair parentheses and the like
#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (setq electric-pair-inhibit-predicate
        `(lambda (c)
           (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))
#+end_src

** Tabbing
Some tab settings to use 4 spaces for tabs
#+begin_src emacs-lisp
  (setq-default tab-width 4
                c-basic-offset 4
                c-ts-mode-indent-offset 4
                c-ts-mode-indent-style 'bsd
                c-default-style "bsd"
                indent-tabs-mode t)
  (defvaralias 'c-basic-offset 'tab-width)
  (defvaralias 'c-ts-mode-indent-offset 'tab-width)
  (indent-tabs-mode nil)
  (defun bugger/change-tab-width (WIDTH)
    "Set the width of a tab to WIDTH in the current buffer"
    (setq-local tab-width WIDTH
                c-basic-offset WIDTH
                c-ts-mode-indent-offset WIDTH
                java-ts-mode-indent-offset WIDTH))
  ;; (add-hook 'java-ts-mode-hook #'(lambda () (interactive) (bugger/change-tab-width 2)))
#+end_src

** Too lazy to type yes
Will map all calls to the =yes-or-no-p= function to =y-or-n-p= so I can just type one letter instead of two or three
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Perspectives
Like workspaces inside of emacs to clean up the buffer list
#+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :defer nil
    :bind (("C-c p k" . persp-kill)
           ("C-c p p" . persp-switch)
           ("C-c p i" . persp-ibuffer)
           ("C-c p b" . persp-switch-to-buffer*))
    :config
    (setq persp-initial-frame-name "Main")
    (persp-mode))
#+end_src

** Dired
Dired, the DIRectory EDitor is a fantastic file manager built straight into emacs

Dired has some nice extensions that let you automatically open in another program
#+begin_src emacs-lisp
  (use-package dired-open
    :ensure t
    :after dired
    :config
    (setq dired-open-extensions '(("gif" . "mpv --loop")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv")
                                  ("mp3" . "foot -e mpv")))
    :bind (:map dired-mode-map
                ("f" . dired-open-file)))
#+end_src
** Auto Backup
Emacs has a feature to automatically back up files every so often, which is nice, but clogs up the directory and git, so I moved it
#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.cache/emacs/auto-saves")))
  (setq auto-save-file-name-transforms '((".*" "~/.cache/emacs/auto-saves" t)))
#+end_src
** Goodbye message
I think that it would be pretty cute to have a little goodbye confirmation when exiting emacs
#+begin_src emacs-lisp
  (defvar goodbye-message-list (list "Don't leave me!"
                                     "B-baka! It's not like I liked you anyway..."
                                     "Thank you for participating in this Aperture Science computer-aided enrichment activity."
                                     "Emacs, Emacs never changes."
                                     "Wake up, Mr. Stallman. Wake up and smell the ashes."
                                     "I don't think you want to do that."
                                     (concat "I'm sorry " user-login-name ", I'm afraid I can't do that.")
                                     "In case I don't see ya, good afternoon, good evening, and good night!"
                                     "Here's looking at you, kid."
                                     "I do wish we could chat longer, but I'm having an old friend for dinner..."
                                     "Life moves pretty fast. If you don't stop and look around once and a while you might miss it."
                                     "So long... partner."
                                     "I'll be right here..."
                                     "I think this just might be my masterpiece."
                                     "Where we go from there is a choice I leave to you."
                                     "Daisy, Daisy, give me your answer do."
                                     "Leaving? Emacs? Are you well?")
    "A list of messages used as prompts for the user when quiting emacs")
  (defun quit-emacs (&rest STUFF)
    (interactive)
    (y-or-n-p (concat (nth (random (length goodbye-message-list))
                           goodbye-message-list)
                      " Really quit emacs?")))
  (global-set-key (kbd "C-x C-c") (lambda ()
                                    (interactive)
                                    (when (quit-emacs)
                                      (save-buffers-kill-terminal))))
#+end_src
** Move Lines
Easily move lines around using =M-p= and =M-n=
#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t
    :init (drag-stuff-global-mode t)
    :bind (("M-p" . drag-stuff-up)
           ("M-n" . drag-stuff-down)))
#+end_src
** Sudo Edit
Tired of wanting to edit a root file with your emacs config but not having permission? Well no longer, with =M-x sudo-edit-find-file RET=!
#+begin_src emacs-lisp
  (use-package sudo-edit :ensure t)
#+end_src
** YASnippet
An autocompletion helper that will fill in snippets for you. e.g. expand =sout= to =System.out.println()=
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :ensure yasnippet-snippets
    :defer t
    :hook (prog-mode . (lambda () (interactive) (yas-minor-mode 1)))
    :init
    (setq yas-snippet-dirs (list
                            (concat user-emacs-directory ".local/elpa/yasnippet-snippets-20230815.820/snippets/")
                            (concat config-dir "snippets/"))))
#+end_src
* Emacs as an Operating System
The packages that let me use emacs instead of some external package
** Calfw
A calendar within emacs! This takes the data from org-agenda and visualizes it in a useful manner, similar to that of something like google calendar
#+begin_src emacs-lisp
  (use-package calfw
    :ensure t
    :ensure calfw-org)
  (use-package calfw-org
    :ensure t
    :config
    ;; hotfix: incorrect time range display
    ;; source: https://github.com/zemaye/emacs-calfw/commit/3d17649c545423d919fd3bb9de2efe6dfff210fe
    (defun cfw:org-get-timerange (text)
      "Return a range object (begin end text).
  If TEXT does not have a range, return nil."
      (let* ((dotime (cfw:org-tp text 'dotime)))
        (and (stringp dotime) (string-match org-ts-regexp dotime)
             (let* ((matches  (s-match-strings-all org-ts-regexp dotime))
                    (start-date (nth 1 (car matches)))
                    (end-date (nth 1 (nth 1 matches)))
                    (extra (cfw:org-tp text 'extra)))
               (if (string-match "(\\([0-9]+\\)/\\([0-9]+\\)): " extra)
                   ( list( calendar-gregorian-from-absolute
                           (time-to-days
                            (org-read-date nil t start-date))
                           )
                     (calendar-gregorian-from-absolute
                      (time-to-days
                       (org-read-date nil t end-date))) text)))))))
#+end_src

** MU4E
Maildir Utils 4 Emacs, an email client for emacs

Depends on the =mu= and =isync= system package
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure-system-package mu
    :ensure-system-package mbsync

    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e"

    :config
    (setq smtpmail-stream-type 'starttls ;; use tls for encryption
          mu4e-change-filenames-when-moving t ;; update file names as you move them around
          mu4e-update-interval (* 10 60) ;; update email every 10 minutes
          mu4e-hide-index-messages t ;; stop flashing my email to everyone around me
          mu4e-get-mail-command "mbsync -a" ;; requires isync to be installed and configured for your emails
          ;; NOTE: I recommend using .authinfo.gpg to store an encrypted set of your email usernames and passwords that mbsync pulls from
          ;; using the decryption function defined below
          message-send-mail-function 'smtpmail-send-it)

    ;; this is a dummy configuration for example
    ;; my real email info is stored in ~/.local/share/emacs/emails.el

    ;; mu4e-contexts (list
    ;;                (make-mu4e-context
    ;;                 :name "My email"
    ;;                 :match-func (lambda (msg)
    ;;                               (when msg
    ;;                                 (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
    ;;                 :vars '((user-mail-address . "myemail@gmail.com")
    ;;                         (user-full-name    . "My Name")
    ;;                         (smtpmail-smtp-server . "smtp.gmail.com")
    ;;                         (smtpmail-smtp-service . 587) ;; this is for tls, use 465 for ssl, 25 for plain
    ;;                         (mu4e-drafts-folder . "/[Gmail]/Drafts")
    ;;                         (mu4e-sent-folder . "/[Gmail]/Sent Mail")
    ;;                         (mu4e-refile-folder . "/[Gmail]/All Mail")
    ;;                         (mu4e-trash-folder . "/[Gmail]/Trash")))

    ;;                (make-mu4e-context
    ;;                 :name "My other email"
    ;;                 :math-func (lambda (msg)
    ;;                              (when msg
    ;;                                (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
    ;;                 :vars '((user-mail-address . "koolkid37@example.com")
    ;;                         (user-full-name    . "koolkid")
    ;;                         (smtpmail-smtp-server . "smtp.example.com")
    ;;                         (smtpmail-smtp-service . 465) ;; this is for ssl, use 587 for ssl, 25 for plain
    ;;                         (mu4e-drafts-folder . "/Drafts")
    ;;                         (mu4e-sent-folder . "/Sent Mail")
    ;;                         (mu4e-refile-folder . "/All Mail")
    ;;                         (mu4e-trash-folder . "/Trash"))))

    (load (concat user-emacs-directory "emails.el")))
#+end_src

*** MU4E Alert
A good package to get notifications when emails come in, as well as a good modeline display for emails
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :after mu4e
    :ensure t
    :config
    (mu4e-alert-enable-mode-line-display)
    (mu4e-alert-enable-notifications))
#+end_src
** Password Encryption
This is really just for mbsync, not for interactive use
#+begin_src emacs-lisp
  (defun efs/lookup-password (&rest keys)
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
        nil)))
#+end_src
* Keybindings
** Delete a tab, not 4 spaces
#+begin_src emacs-lisp
  (global-set-key (kbd "DEL") 'backward-delete-char)
  (setq c-backspace-function 'backward-delete-char)
#+end_src
** Reload Emacs
It's pretty useful to just reload your config on the fly rather than have to reload every time
#+begin_src emacs-lisp
  (defun bugger/emacs-reload ()
    (interactive)
    (setq has-restarted t)
    (org-babel-tangle-file (concat config-dir "config.org"))
    (load-file (concat config-dir "init.el"))
    (load-file (concat config-dir "init.el")))
  (global-set-key (kbd "C-c C-r") 'bugger/emacs-reload)
#+end_src
** Which-key
Which-key displays possible completions for keybindings you have typed in a minibuffer at the bottom of the screen
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode 1))
#+end_src

** kill-all-buffers
It can be useful to kill all of the buffers to clean up your buffer list. This functionality doesn't exist in emacs by default
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-c C-M-k") #'kill-all-buffers)
#+end_src
** Scroll
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-n") #'(lambda ()
                                    (interactive)
                                    (forward-line 1)
                                    (scroll-up-line 1)))
  (global-set-key (kbd "C-M-p") #'(lambda ()
                                    (interactive)
                                    (forward-line -1)
                                    (scroll-down-line 1)))
#+end_src
* Clean up
Just need to put gc-cons-threshold back to a normal figure after init
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1024 1024))
#+end_src
