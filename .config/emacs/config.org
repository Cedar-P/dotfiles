#+TITLE: My Emacs Config, No Longer Bankrupt
#+AUTHOR: bugger
#+PROPERTY: header-args :tangle init.el
#+OPTIONS: toc:2
#+AUTO_TANGLE: t
#+STARTUP: overview

* Table of contents :toc:
- [[#make-emacsd-clean-again][Make .emacs.d clean again!]]
- [[#package-setup][Package Setup]]
  - [[#melpa][Melpa]]
  - [[#use-package][Use Package]]
- [[#ux][UX]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#line-numbers][Line numbers]]
  - [[#rid-of-ugly-stuff][Rid of ugly stuff]]
  - [[#scrolling][Scrolling]]
  - [[#rainbows][Rainbows!]]
  - [[#tree-sitter][Tree Sitter]]
  - [[#visual-line-mode][Visual Line Mode]]
- [[#org-mode][Org mode]]
  - [[#org-tempo][Org tempo]]
  - [[#indentation][Indentation]]
  - [[#toc-org][Toc-org]]
  - [[#babel-settings][Babel settings]]
  - [[#org-agenda][Org agenda]]
- [[#ido][Ido]]
  - [[#smex][Smex]]
- [[#programming-help][Programming Help]]
  - [[#eglot][Eglot]]
  - [[#magit][Magit]]
  - [[#flycheck][Flycheck]]
  - [[#projectile][Projectile]]
  - [[#aggressive-indentation][Aggressive Indentation]]
  - [[#commenting][Commenting]]
- [[#nice-packages-and-settings][Nice Packages and Settings]]
  - [[#dashboard][Dashboard]]
  - [[#keeping-emacs-clean][Keeping emacs clean]]
  - [[#electric-pairing][Electric Pairing]]
  - [[#tabbing][Tabbing]]
  - [[#too-lazy-to-type-yes][Too lazy to type yes]]
  - [[#too-lazy-to-type-esc-esc-esc-or-c-g][Too lazy to type ESC-ESC-ESC or C-g]]
  - [[#perspectives][Perspectives]]
  - [[#dired][Dired]]
  - [[#auto-backup][Auto Backup]]
  - [[#disable-async-shell-command-window][Disable Async Shell Command Window]]
  - [[#diminish][Diminish]]
- [[#emacs-as-an-operating-system][Emacs as an Operating System]]
  - [[#vterm][Vterm]]
  - [[#emms][EMMS]]
  - [[#calfw][Calfw]]
  - [[#mu4e][MU4E]]
  - [[#password-encryption][Password Encryption]]
  - [[#password-storage][Password Storage]]
- [[#keybindings][Keybindings]]
  - [[#delete-a-tab-not-4-spaces][Delete a tab, not 4 spaces]]
  - [[#reload-emacs][Reload Emacs]]
  - [[#which-key][Which-key]]
- [[#clean-up][Clean up]]

* Make .emacs.d clean again!
I like to keep just the things I want in my user-emacs-directory, so I tell emacs to put everything except the stuff I want in a different spot
#+begin_src emacs-lisp
  (if (not (boundp 'has-restarted))
      (setq has-restarted nil)
    (setq has-restarted t))

  (when (not has-restarted)
    (setq config-dir user-emacs-directory)) ;; to use for some stuff like autostart.sh for example, which I do want in my default user-emacs-directory
  (setq user-emacs-directory "~/.local/share/emacs/")
#+end_src

* Package Setup
** Melpa
Melpa is a repository for emacs that enables a lot more than what is in the standard elpa repos
#+begin_src emacs-lisp
  (require 'package)
  (setq package-user-dir (concat user-emacs-directory ".local/elpa"))
  (setq package-gnupghome-dir (concat user-emacs-directory ".local/elpa/gnupg"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src
** Use Package
As of Emacs 29, use-package is built in, so you don't need to install it, but I like to set some settings for it
#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
  (use-package diminish)
#+end_src
* UX
** Fonts
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Terminus (TTF)-15"))
#+end_src

** Theme
#+begin_src emacs-lisp
  (load-theme 'tango-dark t)
#+end_src

** Line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
#+end_src

** Rid of ugly stuff
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

** Scrolling
#+begin_src emacs-lisp
  ;; scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; 1 line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq scroll-conservatively 101) ;; scroll one line at a time when moving the cursor down the page
#+end_src

** Rainbows!
Adds rainbow parentheses and color to hex values and such
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook (prog-mode . (lambda () (interactive) (rainbow-mode 1)))
    :diminish rainbow-mode)
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . (lambda () (interactive) (rainbow-delimiters-mode 1))))
#+end_src

** Tree Sitter
Tree sitter is a parsing library that gives us good, fast syntax highlighting
Tree sitter is now built into emacs as of Emacs 29
#+begin_src emacs-lisp
  (add-hook 'java-mode-hook 'java-ts-mode)
  (add-hook 'c-mode-hook 'c-ts-mode)
  (add-hook 'c++-mode-hook 'c++-ts-mode)
#+end_src
** Visual Line Mode
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
  (diminish 'visual-line-mode)
#+end_src
* Org mode
Org mode is an extremely helpful tool that allows you to do anything from writing scientific papers, take notes, even write entire programs!
** Org tempo
A simple tool that simplifies writing source code blocks to just typing <s TAB, as well as other similar functions
#+begin_src emacs-lisp
  (use-package org-tempo
    :ensure nil)
#+end_src

** Indentation
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (diminish 'org-indent-mode)
  (setq org-hide-leading-stars nil)
#+end_src

** Toc-org
This automatically generates a table of contents under any heading tagged :TOC:
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :hook (org-mode . (lambda () (interactive) (toc-org-mode 1))))
#+end_src
** Babel settings
#+begin_src emacs-lisp
    ;; automatically tangle org files
    (use-package org-auto-tangle
      :ensure t
      :hook (org-mode . (lambda () (interactive) (org-auto-tangle-mode 1)))
      :diminish org-auto-tangle-mode)

    (setq org-src-fontify-natively t ;; use the font like it is in a normal buffer
          org-src-tab-acts-natively t ;; tab works like it does in a normal buffer
          org-confirm-babel-evaluate nil ;; don't ask to evaluate code
          org-src-window-setup 'current-window) ;; have the org-edit-special command consume the current window
#+end_src

** Org agenda
Org agenda is a full blown scheduling application with all the power of org mode built into it
#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/org/agenda/schedule.org"))
#+end_src

* Ido
Interactively Do Things with ido
#+begin_src emacs-lisp
  (ido-mode 1)
  (ido-everywhere 1)
  (use-package ido-completing-read+
    :ensure t
    :config
    (ido-ubiquitous-mode 1))
#+end_src

** Smex
Store history in M-x with smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :bind ("M-x" . smex))
#+end_src
* Programming Help
Things like eglot and projectile are a huge help when programming
** Eglot
A lightweight LSP implementation built into emacs (as of emacs 29)
#+begin_src emacs-lisp
  (add-hook 'c-ts-mode-hook #'eglot-ensure)
  (add-hook 'c++-ts-mode-hook #'eglot-ensure)
  (setq eglot-autoshutdown t)
  (use-package eglot-java
    :hook (java-ts-mode . (lambda () (interactive) (eglot-java-mode 1))))
#+end_src
** Magit
The best way to use git there is
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :ensure t)
#+end_src
** Flycheck
Flycheck is a program that enables essentially 'spell checking' your code
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :ensure t
    :config
    (global-flycheck-mode))
#+end_src

** Projectile
Projectile manages projects
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    :diminish projectile-mode)

  (use-package projectile-ripgrep
    :ensure t
    :after projectile)

  (use-package consult-projectile
    :ensure t
    :after projectile
    :after consult)
#+end_src
** Aggressive Indentation
I like to keep all my lisp code indented properly automatically, and aggressive indentation is really nice for that

This is actually really annoying in languages that use tabbing to denote scope/seperation, like C or Java, so just for lisp
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
** Commenting
Neat package that gives some nice commenting functions
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :bind ("C-c C-/" . evilnc-comment-or-uncomment-lines))
#+end_src
* Nice Packages and Settings
Things that aren't really necessary to do stuff, but nice to have
** Dashboard
*** Dependencies

Nice little lines
#+begin_src emacs-lisp
  (use-package page-break-lines
    :ensure t
    :diminish page-break-lines-mode)
#+end_src

Show the recent files
#+begin_src emacs-lisp
  (use-package recentf
    :ensure t
    :config
    ;; remove boilerplate files from recentf list
    (add-to-list 'recentf-exclude "~/org/agenda/schedule.org")
    (add-to-list 'recentf-exclude (concat user-emacs-directory "bookmarks")))
#+end_src

*** The actual dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :after page-break-lines
    :after projectile
    :after recentf
    :hook (dashboard-mode . (lambda () (interactive) (page-break-lines-mode 1)))
    :hook (dashboard-mode . (lambda () (interactive) (display-line-numbers-mode -1)))
    :ensure t
    :init
    (setq dashboard-page-separator "
  
  ")
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (setq dashboard-items '((recents . 5)
                            (projects . 5)
                            (agenda . 5)))
    (setq dashboard-center-content t)
    (setq dashboard-projects-switch-function 'projectile-persp-switch-project)
    :config
    (dashboard-setup-startup-hook))
#+end_src
** Keeping emacs clean
Some things \*cough cough auto-save-list\* don't like to cooperate with the settings I put earlier, so I use the no-littering package to fix that
#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t)
#+end_src
** Electric Pairing
Automatically pair parentheses and the like
#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (setq electric-pair-inhibit-predicate
        `(lambda (c)
           (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))
#+end_src

** Tabbing
#+begin_src emacs-lisp
  (setq indent-tabs-mode t)
  (setq-default tab-width 4
                c-basic-offset 4
                c-ts-mode-indent-offset 4
                c-ts-mode-indent-style 'bsd
                c-default-style "bsd")
  (defvaralias 'c-basic-offset 'tab-width)
  (defvaralias 'c-ts-mode-indent-offset 'tab-width)
  (add-hook 'prog-mode-hook #'(lambda ()
                                (interactive)
                                (if (equal major-mode 'emacs-lisp-mode)
                                    (setq indent-tabs-mode nil)
                                  (setq indent-tabs-mode t))))
#+end_src

** Too lazy to type yes
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Too lazy to type ESC-ESC-ESC or C-g
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'abort-minibuffers)
#+end_src

** Perspectives
Like workspaces inside of emacs to clean up the buffer list
#+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :bind (("C-c p k" . persp-kill)
           ("C-c p p" . persp-switch)
           ("C-c p i" . persp-ibuffer)
           ("C-c p b" . persp-switch-to-buffer*))
    :config
    (setq persp-initial-frame-name "Main")
    (setq persp-mode-prefix-key "C-c p")
    (persp-mode))
#+end_src
*** Projectile integration
It'd be really nice if you could assign perspectives to projects, right? It is, so I did that.
#+begin_src emacs-lisp
  (use-package persp-projectile
    :ensure t
    :bind (("C-x p p" . projectile-persp-switch-project))
    :after perspective
    :after projectile)
#+end_src
** Dired
Dired has some nice extensions that let you automatically open in another program
#+begin_src emacs-lisp
  (use-package dired-open
    :ensure t
    :after dired
    :config
    (setq dired-open-extensions '(("gif" . "nsxiv")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv")
                                  ("mp3" . "mpv")))
    :bind (:map dired-mode-map
                ("f" . dired-open-file)))
#+end_src
** Auto Backup
Emacs has a feature to automatically back up files every so often, which is nice, but clogs up the directory and git, so I moved it
#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.cache/emacs/auto-saves")))
  (setq auto-save-file-name-transforms '((".*" "~/.cache/emacs/auto-saves" t)))
#+end_src
** Disable Async Shell Command Window
If I want to see the output of a shell command, I'll just do it with a compilation command. This is just annoying
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
  (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+end_src
** Diminish
Not a big fan of a bunch of random minor modes I don't care about clogging up the modeline.
#+begin_src emacs-lisp
  (diminish 'eldoc-mode)
  (diminish 'auto-revert-mode)
#+end_src
* Emacs as an Operating System
The packages that let me use emacs instead of some external package
** Vterm
Vterm is a fully fledged terminal within emacs
#+begin_src emacs-lisp
  (use-package vterm
    :defer t
    :ensure t
    :config
    (setq shell-file-name "/bin/zsh"
          vterm-max-scrollback 5000))
#+end_src
*** Toggling
It's kind of annoying to have an ordinary window stuck there at the bottom that you have to deal with and pop back up to reconfigure the window again, so why not add a toggle for it?
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :after vterm
    :ensure t
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   ;;(dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3))))
#+end_src
** EMMS
The Emacs Multimedia System lets you use emacs as a music player
#+begin_src emacs-lisp
  (use-package emms
    :ensure t
    ;; :after exwm ;; exwm autostart is where mpd gets started
    :config
    (require 'emms-setup)
    (require 'emms-player-mpd)
    (emms-all)
    (setq emms-seek-seconds 5)
    (setq emms-player-list '(emms-player-mpd))
    (setq emms-info-functions '(emms-info-mpd))
    (setq emms-player-mpd-music-directory (concat (getenv "HOME") "/Music"))
    (setq emms-player-mpd-server-name "localhost")
    (setq emms-player-mpd-server-port "6600")
    (setq mpc-host "localhost:6600"))
#+end_src

** Calfw
A calendar within emacs!
#+begin_src emacs-lisp
  (use-package calfw
    :ensure t)
  (use-package calfw-org
    :ensure
    :after calfw)
#+end_src

** MU4E
Maildir Utils 4 Emacs, an email client for emacs
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e"
    :config
    (setq smtpmail-stream-type 'starttls
          mu4e-change-filenames-when-moving t
          mu4e-update-interval (* 10 60)
          mu4e-compose-format-flowed t
          mu4e-hide-index-messages t ;; stop flashing my email to everyone around me
          mu4e-get-mail-command "mbsync -a" ;; requires isync to be installed and configured for your emails
          ;; NOTE: I recommend using .authinfo.gpg to store an encrypted set of your email usernames and passwords that mbsync pulls from
          ;; using the decryption function defined below
          message-send-mail-function 'smtpmail-send-it)

    ;; this is a dummy configuration for example
    ;; my real email info is stored in ~/.local/share/emacs/emails.el

    ;; mu4e-contexts (list
    ;;                (make-mu4e-context
    ;;                 :name "My email"
    ;;                 :match-func (lambda (msg)
    ;;                               (when msg
    ;;                                 (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
    ;;                 :vars '((user-mail-address . "myemail@gmail.com")
    ;;                         (user-full-name    . "My Name")
    ;;                         (smtpmail-smtp-server . "smtp.gmail.com")
    ;;                         (smtpmail-smtp-service . 587) ;; this is for tls, use 465 for ssl, 25 for plain
    ;;                         (mu4e-drafts-folder . "/[Gmail]/Drafts")
    ;;                         (mu4e-sent-folder . "/[Gmail]/Sent Mail")
    ;;                         (mu4e-refile-folder . "/[Gmail]/All Mail")
    ;;                         (mu4e-trash-folder . "/[Gmail]/Trash"))))

    (load (concat user-emacs-directory "emails.el")))
#+end_src

*** MU4E Alert
A good package to get notifications when emails come in, as well as a good modeline display for emails
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :after mu4e
    :ensure t
    :config
    (mu4e-alert-enable-mode-line-display)
    (mu4e-alert-enable-notifications))
#+end_src
** Password Encryption
This is really just for mbsync. To actually use passwords well, see [[#password-storage][Password Storage]]
#+begin_src emacs-lisp
  (defun efs/lookup-password (&rest keys)
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
        nil)))
#+end_src
** Password Storage
Store and retrieve all your passwords with emacs!
#+begin_src emacs-lisp
  (use-package pass)
#+end_src
* Keybindings
** Delete a tab, not 4 spaces
#+begin_src emacs-lisp
  (global-set-key (kbd "DEL") 'backward-delete-char)
  (setq c-backspace-function 'backward-delete-char)
#+end_src
** Reload Emacs
It's pretty useful to just reload your config on the fly rather than have to reload every time
#+begin_src emacs-lisp
  (defun bugger/emacs-reload ()
    (interactive)
    (setq has-restarted t)
    (org-babel-tangle-file (concat config-dir "config.org"))
    (load-file (concat config-dir "init.el"))
    (load-file (concat config-dir "init.el")))
  (global-set-key (kbd "C-c C-r") 'bugger/emacs-reload)
#+end_src
** Which-key
Which-key displays possible completions for keybindings you have typed in a minibuffer at the bottom of the screen
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode 1)
    :diminish which-key-mode)
#+end_src

* Clean up
Just need to put gc-cons-threshold back to a normal figure after init
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1024 1024))
#+end_src
