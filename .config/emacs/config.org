#+TITLE: My Emacs Config, Now Literate!
#+AUTHOR: bugger
#+PROPERTY: header-args :tangle init.el
#+OPTIONS: toc:2
#+auto_tangle: t
#+STARTUP: showeverything

* Table of contents :toc:
- [[#package-setup][Package setup]]
  - [[#melpa][Melpa]]
  - [[#use-package][use-package]]
- [[#ux][UX]]
  - [[#fonts][Fonts]]
  - [[#indent-guides][Indent guides]]
  - [[#modeline][Modeline]]
  - [[#line-numbers][Line numbers]]
  - [[#highlight-the-line][Highlight the line]]
  - [[#theme][Theme]]
  - [[#rid-of-ugly-stuff][Rid of ugly stuff]]
  - [[#scrolling][Scrolling]]
  - [[#dashboard][Dashboard]]
  - [[#rainbows][Rainbows!]]
- [[#org-mode][Org mode]]
  - [[#org-tempo][Org tempo]]
  - [[#auto-tangle][Auto tangle]]
  - [[#indentation][Indentation]]
  - [[#toc-org][Toc-org]]
  - [[#babel-settings][Babel settings]]
  - [[#org-agenda][Org agenda]]
- [[#qol][QOL]]
  - [[#smartparens][Smartparens]]
  - [[#ivy][Ivy]]
  - [[#tabbing][Tabbing]]
  - [[#visual-lines][Visual lines]]
  - [[#too-lazy-to-type-yes][Too lazy to type yes]]
  - [[#too-lazy-to-type-esc-esc-esc-or-c-g][Too lazy to type ESC-ESC-ESC or C-g]]
  - [[#autocompletion][Autocompletion]]
  - [[#flycheck][Flycheck]]
  - [[#vterm][Vterm]]
  - [[#treemacs][Treemacs]]
  - [[#undo][Undo]]
- [[#keybindings][Keybindings]]
  - [[#evil][Evil]]
  - [[#general][General]]
  - [[#which-key][Which-key]]
  - [[#nice-little-things][Nice little things]]
  - [[#files][Files]]
  - [[#windows][Windows]]
  - [[#buffers][Buffers]]
  - [[#ibuffer][Ibuffer]]
  - [[#dired][Dired]]
  - [[#dashboard-1][Dashboard]]
  - [[#org-agenda-1][Org agenda]]
  - [[#helpful-functions][Helpful functions]]
- [[#clean-up][Clean up]]

* Package setup
** Melpa
Melpa is a repository for emacs that enables a lot more than what is in the standard elpa repos
#+begin_src emacs-lisp
  (require 'package)
  (setq package-user-dir "~/.config/emacs/.local/elpa")
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

** use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
#+end_src

* UX
** Fonts
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "AnonymicePro Nerd Font Mono-15"))
(use-package dired-all-the-icons
  :after dired
  :hook (dired-mode . dired-all-the-icons-mode))
#+end_src

** Indent guides
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :defer t
  :ensure t
  :hook (prog-mode . highlight-indent-guides-mode))
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character)
#+end_src

** Modeline
A nice little bar at the bottom
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :hook (doom-modeline-mode . size-indication-mode)
  :hook (doom-modeline-mode . column-number-mode)

  :init
  (setq projectile-dynamic-mode-line t)

  ;; Set these early so they don't trigger variable watchers
  (setq doom-modeline-bar-width 3
        doom-modeline-github nil
        doom-modeline-mu4e nil
        doom-modeline-persp-name nil
        doom-modeline-minor-modes nil
        doom-modeline-major-mode-icon nil
        doom-modeline-buffer-file-name-style 'relative-from-project
        ;; Only show file encoding if it's non-UTF-8 and different line endings
        ;; than the current OSes preference
        doom-modeline-buffer-encoding 'nondefault
        doom-modeline-default-eol-type 0
		doom-modeline-height 35)
  (when (daemonp)
    (setq doom-modeline-icon t))
  :config
  
  (add-hook 'after-setting-font-hook #'+modeline-resize-for-font-h)
  (add-hook 'ef-themes-post-load-hook #'doom-modeline-refresh-bars))
#+end_src

** Line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
#+end_src

** Highlight the line
#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure t
    :config (load-theme 'ef-trio-dark t))
#+end_src

** Rid of ugly stuff
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

** Scrolling
#+begin_src emacs-lisp
  ;; scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq scroll-conservatively 101)
#+end_src

** Dashboard
*** Dependencies
Projectile manages projects
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1))
#+end_src

All the icons gives icons in the dashboard
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

Nice little lines
#+begin_src emacs-lisp
  (use-package page-break-lines
    :config (global-page-break-lines-mode))
#+end_src

Get rid of agenda files from the recentf list  :after recentf
#+begin_src emacs-lisp
  (use-package recentf
    :config
    (add-to-list 'recentf-exclude (concat (getenv "HOME") "/org/agenda/schedule.org"))
    (add-to-list 'recentf-exclude (concat (getenv "HOME") "/org/agenda/todo.org"))
    (add-to-list 'recentf-exclude (concat (getenv "HOME") "/org/agenda/emacs.org"))
    (add-to-list 'recentf-exclude (concat (getenv "HOME") "/org/agenda/homework.org"))
    (add-to-list 'recentf-exclude (concat (getenv "HOME") "/.config/emacs/bookmarks")))
#+end_src

*** The actual dashboard
A dashboard inside of emacs
#+begin_src emacs-lisp
    (use-package dashboard
      :after all-the-icons
      :after page-break-lines
      :after projectile
      :ensure t
      :init
      (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
      (setq dashboard-items '((recents . 5)
                              (projects . 5)
                              (agenda . 5)))
      (setq dashboard-icon-type 'all-the-icons)
      (setq dashboard-center-content t)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      :config
      (dashboard-setup-startup-hook))
#+end_src

** Rainbows!
Adds rainbow parentheses and color to hex values and such
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook (prog-mode . (lambda () (interactive) (rainbow-mode 1))))
  (use-package rainbow-delimiters
    :hook (prog-mode . (lambda () (interactive) (rainbow-delimiters-mode 1))))
  (use-package rainbow-identifiers
    :hook (prog-mode . (lambda () (interactive) (rainbow-identifiers-mode 1))))
#+end_src

* Org mode
Org mode is an extremely helpful tool that allows you to do anything from writing scientific papers, take notes, even write entire programs!
** Org tempo
A simple tool that simplifies writing source code blocks to just typing <s TAB, as well as other similar functions
#+begin_src emacs-lisp
  (use-package org-tempo
    :ensure nil)
#+end_src

** Auto tangle
Tangle a file to its source code blocks automatically upon save
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :ensure t
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Indentation
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Toc-org
This automatically generates a table of contents under any heading tagged :TOC:
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src
** Babel settings
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-src-window-setup 'current-window
        org-src-preserve-indentation t)
#+end_src

** Org agenda
Org agenda is a full blown scheduling application with all the power of org mode built into it
#+begin_src emacs-lisp
(setq org-agenda-files (list "~/org/agenda/todo.org"
							 "~/org/agenda/homework.org"
							 "~/org/agenda/emacs.org"
							 "~/org/agenda/schedule.org"))

;; a better org agenda interface
(use-package calfw)
(use-package calfw-org :after calfw)
#+end_src

* QOL
Things that aren't really necessary to do stuff, but nice to have
** Smartparens
Auto completes (, [, {, ", etc for you so you don't have to keep track of them
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode 1))
#+end_src

** Ivy
Ivy is a minibuffer autocompletion framework that makes it a lot easier to do things like input commands
*** Just ivy
#+begin_src emacs-lisp
  (use-package ivy
    :defer 0.1
    :diminish
    :custom
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))
#+end_src

*** Counsel
Counsel a sort of extension to ivy, taking lots of functions already in emacs and putting them into an ivy completion minibuffer
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :defer t
    :config
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ; Disable the "^" in interactive counsel commands like M-x
#+end_src

*** Ivy-rich
Gives us keybindings alongside the commands they go with when in an ivy completion minibuffer
#+begin_src emacs-lisp
  (use-package ivy-rich
    :after ivy
    :defer t
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
    (ivy-rich-mode 1))
#+end_src

*** Swiper
A better way to search
#+begin_src emacs-lisp
  (use-package swiper
    :after ivy
    :defer t
    :bind (:map evil-normal-state-map
           ("/" . swiper-isearch)
           ("n" . evil-search-previous)
           ("N" . evil-search-next)))
#+end_src
** Tabbing
#+begin_src emacs-lisp
  (setq indent-tabs-mode t)
  (setq-default tab-width 4
                c-basic-offset 4
                c-default-style "stroustrup")
  (defvaralias 'c-basic-offset 'tab-width)
#+end_src
** Visual lines
a#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
a#+end_src
** Too lazy to type yes
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Too lazy to type ESC-ESC-ESC or C-g
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'abort-minibuffers)
#+end_src

** Autocompletion
Emacs has support for code autocompletion on par with that of IDEs like VSCode or IntelliJ
*** Company
Company is the package that enables the little popup for autocompletion so you don't to invoke a keybind or anything
#+begin_src emacs-lisp
(use-package company
  :defer t
  :ensure t
  :config
  (global-company-mode))
#+end_src
*** LSP
LSP is the Language Server Protocol, and is what actually populates the company frame with suggestions
#+begin_src emacs-lisp
(use-package lsp-mode
  :defer t
  :hook (prog-mode . #'lsp-deferred)
  :config
  (setq lsp-keymap-prefix "C-l"))
(use-package lsp-haskell
  :defer t
  :after lsp-mode)
(use-package lsp-treemacs
  :defer t
  :after lsp-mode)
(use-package lsp-java
  :defer t
  :after lsp-mode)
#+end_src

** Flycheck
Flycheck is a program that enables essentially 'spell checking' your code
#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :config
  (global-flycheck-mode))
#+end_src
** Vterm
Vterm is a fully fledged terminal within emacs
#+begin_src emacs-lisp
(use-package vterm :defer t)
#+end_src
** Treemacs
Treemacs is a little side panel that shows a directory tree
#+begin_src emacs-lisp
(use-package treemacs :defer t)
(use-package treemacs-evil :after (treemacs evil))
(use-package treemacs-projectile :after (treemacs projectile))
(use-package treemacs-magit :after (treemacs magit))
(use-package treemacs-all-the-icons :after treemacs)
#+end_src
** Undo
#+begin_src emacs-lisp
(setq evil-undo-system 'undo-redo)
#+end_src
* Keybindings
** Evil
Evil is a vim emulation package for emacs, the emacs vi extension layer
#+begin_src emacs-lisp
  (use-package evil
    :init
	(setq evil-want-keybinding nil)
    (evil-mode 1)
    (setq evil-undo-system 'undo-redo))
#+end_src

add evil in every buffer
#+begin_src emacs-lisp
(use-package evil-collection
	:after evil
	:defer t
	:config
	(setq evil-collection-mode-list '(dashboard dired ibuffer search agenda))
	(evil-collection-init))
#+end_src

** General
General is a package that allows us to do very complex things like bind space as a leader key, or add which-key labels to prefix keys
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :init (general-evil-setup t))
#+end_src

** Which-key
Which-key displays possible completions for keybindings you have typed in a minibuffer at the bottom of the screen
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode 1))
#+end_src

** Nice little things
#+begin_src emacs-lisp
  ;; tab over the region
  (general-define-key
   :states 'visual
   "TAB" (lambda ()
           (interactive)
           (tab-to-tab-stop)))

  ;; comment/uncomment the region
  (general-define-key
   :states '(normal visual)
   "C-/" '(evilnc-comment-or-uncomment-lines :which-key "Comment lines"))

  ;; toggle tolding
  (general-define-key
   :states 'normal
   "TAB" 'evil-toggle-fold)
#+end_src

** Files
#+begin_src emacs-lisp
  (general-define-key
   :states '(normal visual)
   :prefix "SPC"
   "f"   '(:ignore t :which-key "files")
   "f s" '(save-buffer :which-key "Save file")
   "."   '(find-file   :which-key "open file"))
#+end_src

** Windows
#+begin_src emacs-lisp
  (general-define-key
   :states '(normal visual)
   :prefix "SPC"
   "w"   '(:ignore t              :which-key "windows")
   "w w" '(evil-window-next       :which-key "next window")
   "w v" '(evil-window-vsplit     :which-key "create new vertical window")
   "w n" '(evil-window-new        :which-key "create new window")
   "w q" '(evil-window-delete     :which-key "delete current window")
   "w k" '(kill-buffer-and-window :which-key "delete current window and buffer"))
#+end_src

** Buffers
#+begin_src emacs-lisp
  (general-define-key
   :states '(normal visual)
   :prefix "SPC"
   "b"   '(:ignore t       :which-key "buffer")
   "b b" '(buffer-menu     :which-key "buffer menu")
   "b i" '(ibuffer         :which-key "ibuffer")
   "b c" '(kill-buffer     :which-key "kill buffer")
   "b k" '(kill-buffer     :which-key "kill buffer")
   "b p" '(previous-buffer :which-key "previous buffer")
   "b n" '(next-buffer     :which-key "next buffer"))
#+end_src

** Ibuffer
Add evil keybindings
#+begin_src emacs-lisp
  (setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes))
  (with-eval-after-load 'ibuffer
    (evil-define-key 'normal ibuffer-mode-map (kbd "l") 'ibuffer-visit-buffer))
#+end_src

** Dired
#+begin_src emacs-lisp
(with-eval-after-load 'dired
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-find-file))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(with-eval-after-load "evil"
  (add-hook 'dashboard-mode-hook #'(lambda ()
								   (interactive)
								   (evil-local-set-key 'normal (kbd "r") 'dashboard-jump-to-recents)
								   (evil-local-set-key 'normal (kbd "l") 'dashboard-return)
								   (evil-local-set-key 'normal (kbd "e") #'(lambda ()
																			 (interactive)
																			 (find-file "~/.config/emacs/config.org")))
								   (evil-local-set-key 'normal (kbd "x") #'(lambda ()
																			 (interactive)
																			 (find-file "~/.config/xmonad/xmonad.org")))
								   (evil-local-set-key 'normal (kbd "p") #'(lambda ()
																			 (interactive)
																			 (find-file "~/.config/polybar/config.ini"))))))
#+end_src

** Org agenda
#+begin_src emacs-lisp
(general-define-key
 :states '(normal visual)
 :prefix "SPC"
 "o"     '(:ignore t :which-key "org")
 "o a"   '(:ignore t :which-key "org agenda")
 "o a c" '(cfw:open-org-calendar :which-key "open org calendar")
 "o C"   '(cfw:open-org-calendar :which-key "open org calendar")
 "o a a" '(org-agenda :which-key "open org agenda")
 "o a t" '(org-agenda-todo :which-key "open todo list"))
#+end_src
** Helpful functions
#+begin_src emacs-lisp
(defun bugger/reload ()
  (interactive)
  (org-babgel-tangle-file "~/.config/emacs/config.org")
  (load-file "~/.config/emacs/init.el")
  (load-file "~/.config/emacs/init.el"))

(general-define-key
 :states '(normal visual)
 :prefix "SPC"
 "h" '(:ignore t :which-key "help")
 "h r" '(:ignore t :which-key "reload")
 "h r r" '(bugger/reload :which-key "reload emacs")
 "h v" '(describe-variable :which-key "describe variable")
 "h f" '(describe-function :which-key "describe function"))
#+end_src

* Clean up
Just need to put gc-cons-threshold back to a normal figure after init
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1024 1024))
#+end_src
