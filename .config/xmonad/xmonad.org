# -*- org-src-preserve-indentation: t; -*-
#+title: My XMonad Config
#+author: [[https://github.com/bugger2][bugger2]]
#+OPTIONS: toc:2
#+PROPERTY: header-args :tangle xmonad.hs
#+auto_tangle: t

* Welcome
Hello and welcome to my XMonad configuration. It was a harrowing, arduous, and downright dangerous journey to arrive where I am today, yet it never seems to end. Please sit back and enjoy (or suffer through) my epic haskell skills.

* Table of Contents :toc:
- [[#welcome][Welcome]]
- [[#imports][Imports]]
  - [[#xmonad-import][XMonad Import]]
  - [[#layout-imports][Layout Imports]]
  - [[#layout-modifiers][Layout Modifiers]]
  - [[#hook-imports][Hook Imports]]
  - [[#util-imports][Util Imports]]
  - [[#action-imports][Action Imports]]
  - [[#prompt-imports][Prompt Imports]]
  - [[#miscellaneous-imports][Miscellaneous Imports]]
- [[#spacing][Spacing]]
- [[#variables][Variables]]
- [[#prompt][Prompt]]
  - [[#prompt-configuration][Prompt configuration]]
- [[#layouts][Layouts]]
  - [[#layout-configs][Layout configs]]
  - [[#showwname][ShowWName]]
- [[#screenshots][Screenshots]]
- [[#startup-hook][Startup hook]]
- [[#manage-hook][Manage hook]]
- [[#keybindings][Keybindings]]
  - [[#table-of-keys][Table of keys]]
  - [[#named-actions][Named Actions]]
  - [[#basic-keybindings][Basic keybindings]]
  - [[#music-control][Music control]]
  - [[#brightness-control][Brightness control]]
  - [[#window-control][Window control]]
  - [[#workspace-control][Workspace control]]
  - [[#layout-control][Layout control]]
  - [[#misc][Misc]]
- [[#main][Main]]

* Imports
** XMonad Import
Just needed a special spot for this special import
#+begin_src haskell
import XMonad
#+end_src

** Layout Imports
#+begin_src haskell
import XMonad.Layout.SimplestFloat
import XMonad.Layout.ResizableTile
#+end_src

** Layout Modifiers
#+begin_src haskell
import XMonad.Layout.Spacing
import XMonad.Layout.LayoutModifier
import XMonad.Layout.NoBorders
import XMonad.Layout.ToggleLayouts
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, NOBORDERS))
import XMonad.Layout.WindowArranger (windowArrange)
import XMonad.Layout.WindowNavigation
import XMonad.Layout.Renamed
import XMonad.Layout.Simplest
import XMonad.Layout.SubLayouts
import XMonad.Layout.ShowWName
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
#+end_src

** Hook Imports
#+begin_src haskell
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat)
import XMonad.Hooks.SetWMName
import XMonad.Hooks.WindowSwallowing
import XMonad.Hooks.EwmhDesktops

-- Bar stuff
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.StatusBar
import XMonad.Hooks.StatusBar.PP
#+end_src

** Util Imports
#+begin_src haskell
import XMonad.Util.SpawnOnce
import XMonad.Util.Ungrab
import XMonad.Util.Hacks (windowedFullscreenFixEventHook)
import XMonad.Util.WorkspaceCompare
import XMonad.Util.EZConfig
import XMonad.Util.NamedActions
import XMonad.Util.Run (spawnPipe)
#+end_src

** Action Imports
#+begin_src haskell
import XMonad.Actions.MouseResize
import XMonad.Actions.NoBorders
#+end_src

** Prompt Imports
#+begin_src haskell
import XMonad.Prompt
import XMonad.Prompt.FuzzyMatch
import XMonad.Prompt.Input
#+end_src

** Miscellaneous Imports
#+begin_src haskell
import qualified XMonad.StackSet as W
import qualified Data.Map as M
import XMonad.ManageHook
import Data.Monoid
import Data.Char (toUpper)
import Graphics.X11.ExtraTypes.XF86 -- Epic keys
import System.Exit
import System.IO
#+end_src

* Spacing
This adds spacing in between windows to make things look nice
#+begin_src haskell
mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True
#+end_src

* Variables
Definitions for various window manager-y things, like which terminal I want, workspaces, etc.
Note that the workspaces need a nerd font to be installed and set up in your bar to display properly
#+begin_src haskell
myWorkspaces = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
               -- At most, I use like 5 workspaces at a time I had no idea what to put for 7, 8, 9, or 10
myTerminal = "urxvt"
#+end_src

* Prompt
XMonad has support for its own dmenu-like prompts
** Prompt configuration
#+begin_src haskell
myXPConfig = def
      { font                = "xft:Ubuntu Nerd Font:size=14"
      , bgColor             = "#282c34"
      , fgColor             = "#bbc2cf"
      , bgHLight            = "#51afef"
      , fgHLight            = "#bbc2cf"
      , borderColor         = "#282c34"
      , promptBorderWidth   = 0
      , position            = Top
      , height              = 33
      , historySize         = 256
      , historyFilter       = id
      , defaultText         = []
      , autoComplete        = Just 100000
      , showCompletionOnTab = True
      , searchPredicate     = fuzzyMatch
      , alwaysHighlight     = True
      , maxComplRows        = Just 5
      }
#+end_src

* Layouts
** Layout configs
#+begin_src haskell
tall    = renamed [Replace "tall"]
        $ smartBorders
        $ windowNavigation
        $ subLayout [] (smartBorders Simplest)
        $ mySpacing 8
        $ ResizableTall 1 (3/100) (1/2) []
monocle = renamed [Replace "monocle"]
        $ noBorders
        $ windowNavigation
        $ subLayout [] (smartBorders Simplest)
        $ Full
floats  = renamed [Replace "floats"]
        $ smartBorders
        $ simplestFloat

myLayoutHook = avoidStruts
               $ mouseResize
               $ windowArrange
               $ T.toggleLayouts floats
               $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
  where
    myDefaultLayout = withBorder 1 tall
                               ||| noBorders monocle
                               ||| floats
#+end_src

** ShowWName
ShowWName is an XMonad plugin that shows what workspace you switch to upon changing to it
Ubuntu Nerd Font will likely not be installed on your system and needs to be installed
#+begin_src haskell
myShowWNameTheme = def
  { swn_font    = "xft:Ubuntu Nerd Font:bold:size=60"
  , swn_fade    = 1.0
  , swn_bgcolor = "#1c1f24"
  , swn_color   = "#ffffff"
  }
#+end_src

* Screenshots
To prompt for screenshot names, I have to define a function that takes in that name
#+begin_src haskell
takeScreenshot :: Bool -> String -> X ()
takeScreenshot b s = do
  if b
     then spawn $ concat ["import ~/Pictures/\"", s, "\".png"]
     else spawn $ concat ["import -window root ~/Pictures/\"", s, "\".png"]
#+end_src

* Startup hook
All of these commands are run when xmonad is started.

spawn = run this shell command every time xmonad is started or restarted
spawnOnce = run this shell command exclusively when xmonad is first started from the tty/login manager
#+begin_src haskell
myStartupHook :: X ()
myStartupHook = do
  spawnOnce "mpv /opt/sounds/startup-01.mp3"
  spawnOnce "xsetroot -cursor_name left_ptr"
  spawnStatusBar "~/.config/polybar/launch.sh"
  spawnOnce "wallpaper.sh"
  -- Makes repeat rate much faster
  spawnOnce "xset r rate 200 65"
  -- Epic caps lock instead of escape chad moment
  spawnOnce "setxkbmap -option ctrl:nocaps"
  -- This enables natural scrolling. Disable if scrolling direction feels weird for you
  spawnOnce "natScroll.sh"
  --compositor
  spawnOnce "xcompmgr &"
  -- music
  spawnOnce "if [ -z $(pidof mpd) ]; then mpd; fi"
  -- let java swing apps like intellij work
  setWMName "LG3D" -- tricks programs into thining this is LG3D, which is the only thing java can work with for some reason
#+end_src

* Manage hook
This is a hook that manages all the windows. For example, gimp will always be started as floating, and anything that is fullscreen is set to be fullscreen and floating
The manageDocks hook makes sure that polybar will put in the right spot
#+begin_src haskell
myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
myManageHook = composeAll
  [ className =? "confirm"                             --> doFloat
  , className =? "file_progress"                       --> doFloat
  , className =? "dialog"                              --> doFloat
  , className =? "download"                            --> doFloat
  , className =? "error"                               --> doFloat
  , className =? "Gimp"                                --> doFloat
  , className =? "notification"                        --> doFloat
  , className =? "splash"                              --> doFloat
  , className =? "toolbar"                             --> doFloat
  , className =? "Yad"                                 --> doFloat
  , title     =? "music"                               --> doFloat
  , title     =? "cal"                                 --> doFloat
  , (className =? "firefox" <&&> resource =? "Dialog") --> doFloat
  , isFullscreen                                       --> doFullFloat
  , className =? "discord"                             --> doShift (myWorkspaces !! 3) -- send discord to the 4th workspace (arrays start at 0)
  , className =? "freetube"                            --> doShift (myWorkspaces !! 0)
  , className =? "steam"                               --> doShift (myWorkspaces !! 5)
  ] <+> manageDocks
#+end_src

* Keybindings
This is my keymap. It uses EZConfig to make things a bit easier to read, and is by far the biggest (and messiest) part of the whole config.
For reference, M = super, S = shift, C = control
** Table of keys
*** [[#basic-keybindings][Basic keybindings]]
|-------------------+------------------------------------------------------------|
| Keymap            | Definition                                                 |
|-------------------+------------------------------------------------------------|
| Super+Shift+Enter | Spawn a terminal                                           |
| Super+Shift+x     | Close the focused window                                   |
| Super+Shift+q     | Close XMonad                                               |
| Super+Shift+r     | Restart XMonad                                             |
| Super+p           | Spawn rofi, and make a menu noise (if you have that noise) |
|-------------------+------------------------------------------------------------|

*** [[#music-control][Music]]
|-----------------------+------------------------|
| Keymap                | Definition             |
|-----------------------+------------------------|
| Super+Shift+j         | Pause the music        |
| Pause button          | Pause the music        |
| Super+Shift+h         | Play the previous song |
| Previous track button | Play the previous song |
| Super+Shift+l         | Play the next song     |
| Next track button     | Play the next song     |
|-----------------------+------------------------|

*** [[#brightness-control][Brightness]]
|------------------------------+----------------------------------|
| Keymap                       | Definition                       |
|------------------------------+----------------------------------|
| Brightness up button         | Increase the screen brightness   |
| Brightness down button       | Decrease the screen brightness   |
| Super+Brightness up button   | Artificially increase brightness |
| Super+Brightness down button | Artificially decrease brightness |
|------------------------------+----------------------------------|

*** [[#window-control][Window control]]
|---------+---------------------------------------|
| Keymap  | Definition                            |
|---------+---------------------------------------|
| Super+j | Move down in the window stack         |
| Super+k | Move up in the window stack           |
| Super+h | Decrease screen real estate of master |
| Super+l | Increase screen real estate of master |
|---------+---------------------------------------|

*** [[#workspace-control][Workspace control]]
|---------------+------------------------------------------|
| Keymap        | Definition                               |
|---------------+------------------------------------------|
| Super+Space   | Go to the next layout                    |
| Super+t       | Force a floating window back to tiling   |
| Super+m       | Go into monocle mode (fullscreen)        |
| Super+f       | Put a window into floating mode          |
| Super+b       | Toggle the bar                           |
| Super+b       | Toggle the spacing allocated for the bar |
| Super+e       | Spawn emacs                              |
| Super+<plus>  | Increase window spacing                  |
| Super+<minus> | Decrease window spacing                  |
|---------------+------------------------------------------|

*** [[#misc][Misc]]
|-----------------------+----------------------------------------------|
| Super+w               | Change wallpaper to a random one             |
| Super+Shift+s s       | Take screenshot of a selection of the screen |
| Super+Shift+s Shift+s | Take screenshot of the whole screen          |
| Spawn emacs           |                                              |
| Super+<plus>          | Increase window spacing                      |
| Super+<minus>         | Decrease window spacing                      |
|-----------------------+----------------------------------------------|

** Named Actions
Named actions are a great way to add descriptions to your keybindings. You put a description on a keybinding, press Super+F1, and blammo! You're looking at your keybindings in yad
#+begin_src haskell
subtitle' ::  String -> ((KeyMask, KeySym), NamedAction)
subtitle' x = ((0,0), NamedAction $ map toUpper
                      $ sep ++ "\n-- " ++ x ++ " --\n" ++ sep)
  where
    sep = replicate (6 + length x) '-'

showKeybindings :: [((KeyMask, KeySym), NamedAction)] -> NamedAction
showKeybindings x = addName "Show Keybindings" $ io $ do
  h <- spawnPipe $ "yad --text-info --fontname=\"JetBrains Mono\" --center --geometry=1200x800 --title \"XMonad keybindings\""
  hPutStr h  $ unlines $ showKm x
  hClose h
  return ()
#+end_src

** Basic keybindings
#+begin_src haskell
myKeys c = let subKeys str ks = subtitle' str : mkNamedKeymap c ks in
        subKeys "Basic keybindings"
        [ ("M-S-<Return>", addName "Open a terminal"               $ windows W.focusMaster >> spawn myTerminal)
        , ("M-S-x",        addName "Close the current window"      $ kill)
        , ("M-p",          addName "Open the application launcher" $ spawn (concat ["mpv /opt/sounds/menu-01.mp3 & rofi -show drun -terminal " , myTerminal]))
        -- , ("M-p",          addName "Open the application launcher" $ spawn "mpv /opt/sounds/menu-01.mp3" *> inputPrompt myXPConfig "Run Program" ?+ spawn)
        , ("M-S-q",        addName "Exit XMonad"                   $ io (exitWith ExitSuccess) >> spawn "mpv /opt/sounds/shutdown-01.mp3" >> spawn "doas shutdown now")
        , ("M-S-r",        addName "Restart XMonad"                $ spawn "xmonad --recompile && xmonad --restart")
        ]
#+end_src

** Music control
#+begin_src haskell
        ^++^ subKeys "Music"
        [ ("M-S-j",                  addName "Toggle the music"       $ spawn "mpc toggle")
        , ("<XF86AudioPlay>",        addName "Toggle the music"       $ spawn "mpc toggle")
        , ("M-S-h",                  addName "Play the previous song" $ spawn "mpc prev")
        , ("<XF86AudioPrev>",        addName "Play the previous song" $ spawn "mpc prev")
        , ("M-S-l",                  addName "Play the next song"     $ spawn "mpc next")
        , ("<XF86AudioNext>",        addName "Play the next song"     $ spawn "mpc next")
        , ("<XF86AudioRaiseVolume>", addName "Turn the volume up"     $ spawn "~/scripts/snd up")
        , ("<XF86AudioLowerVolume>", addName "Turn the volume down"   $ spawn "~/scripts/snd down")
        ]
#+end_src

** Brightness control
#+begin_src haskell
        ^++^ subKeys "Brightness"
        [ ("<XF86MonBrightnessUp>",     addName "Turn the artificial brightness up"   $ spawn "real-brightness up")
        , ("<XF86MonBrightnessDown>",   addName "Turn the artificial brightness down" $ spawn "real-brightness down")

        , ("S-<XF86MonBrightnessUp>",   addName "Turn the brightness up"              $ spawn "brightness up")
        , ("S-<XF86MonBrightnessDown>", addName "Turn the brightness down"            $ spawn "brightness down")
        ]
#+end_src

** Window control
#+begin_src haskell
        ^++^ subKeys "Windows"
        [ ("M-j", addName "Go down the window stack"                   $ windows W.focusDown)
        , ("M-k", addName "Go up the window stack"                     $ windows W.focusUp)
        , ("M-h", addName "Shrink the master window"                   $ sendMessage Shrink)
        , ("M-l", addName "Expand the master window"                   $ sendMessage Expand)
        , ("M-<Return>", addName "Swap the current window with master" $ windows W.swapMaster)
        ]
#+end_src

** Workspace control
#+begin_src haskell
        ^++^ subKeys "Workspaces"
        [ ("M-1", addName "Go to workspace 1"  $ ((windows $ W.greedyView $ myWorkspaces !! 0)))
        , ("M-2", addName "Go to workspace 2"  $ ((windows $ W.greedyView $ myWorkspaces !! 1)))
        , ("M-3", addName "Go to workspace 3"  $ ((windows $ W.greedyView $ myWorkspaces !! 2)))
        , ("M-4", addName "Go to workspace 4"  $ ((windows $ W.greedyView $ myWorkspaces !! 3)))
        , ("M-5", addName "Go to workspace 5"  $ ((windows $ W.greedyView $ myWorkspaces !! 4)))
        , ("M-6", addName "Go to workspace 6"  $ ((windows $ W.greedyView $ myWorkspaces !! 5)))
        , ("M-7", addName "Go to workspace 6"  $ ((windows $ W.greedyView $ myWorkspaces !! 6)))
        , ("M-8", addName "Go to workspace 8"  $ ((windows $ W.greedyView $ myWorkspaces !! 7)))
        , ("M-9", addName "Go to workspace 9"  $ ((windows $ W.greedyView $ myWorkspaces !! 8)))
        , ("M-0", addName "Go to workspace 10" $ ((windows $ W.greedyView $ myWorkspaces !! 9)))

        , ("M-S-1", addName "Send focused window to workspace 1"  $ ((windows $ W.shift $ myWorkspaces !! 0)))
        , ("M-S-2", addName "Send focused window to workspace 2"  $ ((windows $ W.shift $ myWorkspaces !! 1)))
        , ("M-S-3", addName "Send focused window to workspace 3"  $ ((windows $ W.shift $ myWorkspaces !! 2)))
        , ("M-S-4", addName "Send focused window to workspace 4"  $ ((windows $ W.shift $ myWorkspaces !! 3)))
        , ("M-S-5", addName "Send focused window to workspace 5"  $ ((windows $ W.shift $ myWorkspaces !! 4)))
        , ("M-S-6", addName "Send focused window to workspace 6"  $ ((windows $ W.shift $ myWorkspaces !! 5)))
        , ("M-S-7", addName "Send focused window to workspace 7"  $ ((windows $ W.shift $ myWorkspaces !! 6)))
        , ("M-S-8", addName "Send focused window to workspace 8"  $ ((windows $ W.shift $ myWorkspaces !! 7)))
        , ("M-S-9", addName "Send focused window to workspace 9"  $ ((windows $ W.shift $ myWorkspaces !! 8)))
        , ("M-S-0", addName "Send focused window to workspace 10" $ ((windows $ W.shift $ myWorkspaces !! 9)))

        , ("M-C-1", addName "Send focused window to workspace 1 and follow it"  $ ((windows (W.shift (myWorkspaces !! 0)))) >> ((windows $ W.greedyView $ myWorkspaces !! 0)))
        , ("M-C-2", addName "Send focused window to workspace 2 and follow it"  $ ((windows (W.shift (myWorkspaces !! 1)))) >> ((windows $ W.greedyView $ myWorkspaces !! 1)))
        , ("M-C-3", addName "Send focused window to workspace 3 and follow it"  $ ((windows (W.shift (myWorkspaces !! 2)))) >> ((windows $ W.greedyView $ myWorkspaces !! 2)))
        , ("M-C-4", addName "Send focused window to workspace 4 and follow it"  $ ((windows (W.shift (myWorkspaces !! 3)))) >> ((windows $ W.greedyView $ myWorkspaces !! 3)))
        , ("M-C-5", addName "Send focused window to workspace 5 and follow it"  $ ((windows (W.shift (myWorkspaces !! 4)))) >> ((windows $ W.greedyView $ myWorkspaces !! 4)))
        , ("M-C-6", addName "Send focused window to workspace 6 and follow it"  $ ((windows (W.shift (myWorkspaces !! 5)))) >> ((windows $ W.greedyView $ myWorkspaces !! 5)))
        , ("M-C-7", addName "Send focused window to workspace 7 and follow it"  $ ((windows (W.shift (myWorkspaces !! 6)))) >> ((windows $ W.greedyView $ myWorkspaces !! 6)))
        , ("M-C-8", addName "Send focused window to workspace 8 and follow it"  $ ((windows (W.shift (myWorkspaces !! 7)))) >> ((windows $ W.greedyView $ myWorkspaces !! 7)))
        , ("M-C-9", addName "Send focused window to workspace 9 and follow it"  $ ((windows (W.shift (myWorkspaces !! 8)))) >> ((windows $ W.greedyView $ myWorkspaces !! 8)))
        , ("M-C-0", addName "Send focused window to workspace 10 and follow it" $ ((windows (W.shift (myWorkspaces !! 9)))) >> ((windows $ W.greedyView $ myWorkspaces !! 9)))
        ]
#+end_src

** Layout control
#+begin_src haskell
        ^++^ subKeys "Layouts"
        [ ("M-<Space>", addName "Switch to the next layout"        $ sendMessage NextLayout)
        , ("M-t",       addName "Force a floating window to tile"  $ withFocused $ windows . W.sink)
        , ("M-m",       addName "Toggle monocle (fullscreen) mode" $ sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts)
        , ("M-f",       addName "Toggle a floating window"         $ sendMessage $ T.Toggle "floats")
        , ("M-b",       addName "Toggle polybar"                   $ sendMessage ToggleStruts >> spawn "polybar-msg cmd toggle")
        , ("M-S-b",     addName "Toggle the spacing for polybar"   $ sendMessage ToggleStruts)
        ]
#+end_src

** Misc
#+begin_src haskell
        ^++^ subKeys "Misc"
        [ ("M-S-s s",   addName "Take a screenshot of part of the screen" $ unGrab *> inputPrompt myXPConfig "Image Name" ?+ takeScreenshot True)
        , ("M-S-s S-s", addName "Take a screenshot of the whole screen"   $ unGrab *> inputPrompt myXPConfig "Image Name" ?+ takeScreenshot False)
        , ("M-w",       addName "Set a random wallpaper"                  $ spawn "~/.config/xmonad/wallpaper.sh")
        , ("M-e",       addName "Spawn emacs"                             $ spawn "emacs")
        , ("M-=",       addName "Increase window spacing"                 $ incWindowSpacing 2 *> incScreenSpacing 2)
        , ("M--",       addName "Decrease window spacing"                 $ decWindowSpacing 2 *> decScreenSpacing 2)
        , ("M-`",       addName "Lock the screen"                         $ spawn "mpc pause ; i3lock -i ~/.local/wallpapers/$(ls ~/.local/wallpapers | shuf | head -n 1)")
        ]
#+end_src

* Main
This is the main functions that ties everything together. It takes all the things defined earlier, and just tells XMonad what to do using those
#+begin_src haskell
main :: IO ()
main = do
        xmonad $ addDescrKeys' ((mod4Mask, xK_F1), showKeybindings) myKeys $ ewmhFullscreen $ ewmh . docks  $ def {
        terminal                  = myTerminal
        , focusFollowsMouse       = True
        , clickJustFocuses        = False
        , handleEventHook         = windowedFullscreenFixEventHook <> swallowEventHook (className =? "urxvt") (return True)
        , modMask                 = mod4Mask
        , workspaces              = myWorkspaces
        , layoutHook              = showWName' myShowWNameTheme $ myLayoutHook
        , startupHook             = myStartupHook
        , manageHook              = myManageHook
        --, logHook                 = showWNameLogHook myShowWNameTheme
        }
#+end_src
